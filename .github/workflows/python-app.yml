# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest


variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  STAGE_ID: ${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}

cache:
  paths:
    - .cache/pip
    - venv/

stages:
  - test
  - package
  - test-package

# Using kaniko, which is an laternative for Docker, because our Gitlab runners are not configured to build and push images with Docker.
image-creation:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  before_script: []
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"

pytest:
  stage: test
  image: python:3.10
  script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install --upgrade setuptools
    - pip install -r requirements.txt
    - pytest

package-creation:
  stage: package
  image: python:3.10
  script:
    - pip install build twine
    - python setup.py bdist_wheel
    # attention: le package registry n'autorise pas de pousser 2x la mÃªme version (==> changer ou supprimer le package)
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  artifacts:
    paths:
      - dist/*.whl
      - 
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Login to registry
      run: echo ${{ secrets.PERSONAL_TOKEN }} | docker \
        login ghcr.io -u LilineZwatta  --password-stdin
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag \
        ghcr.io/LilineZwatta/tp2:latest
    - name: Push the image into the registry
      run: docker push ghcr.io/LilineZwatta/tp2:latest


